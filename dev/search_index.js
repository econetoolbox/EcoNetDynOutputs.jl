var documenterSearchIndex = {"docs":
[{"location":"#EcoNetDynOutputs.jl","page":"Home","title":"EcoNetDynOutputs.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for EcoNetDynOutputs.jl","category":"page"},{"location":"docstrings/#Docstrings","page":"Functions","title":"Docstrings","text":"","category":"section"},{"location":"docstrings/#EcoNetDynOutputs.extract_last_timesteps-Tuple{Any}","page":"Functions","title":"EcoNetDynOutputs.extract_last_timesteps","text":"extract_last_timesteps(solution; idxs = nothing, quiet = false, kwargs...)\n\nReturns the biomass matrix of species x time over the last timesteps.\n\nArguments\n\nlast: the number of last timesteps to consider. A percentage can also be also be provided as a String ending by %. Defaulted to 1.\nidxs: vector of species indexes or names. Set to nothing by default.\nquiet: ignores warning issue while extracting timesteps before last species extinction\n\nIf idxs is an integer, it returns a vector of the species biomass instead of a matrix.\n\nExamples\n\njulia> fw = Foodweb([0 0; 1 0])\n       m = default_model(fw)\n       B0, t_end = [1, 1], 1_000\n       sol = simulate(m, B0, t_end);\n\njulia> last = extract_last_timesteps(sol; last = 1, idxs = [2, 1]);\n       last ≈ sol.u[end][[2, 1]]\ntrue\n\njulia> last = extract_last_timesteps(sol; last = 1, idxs = [\"s2\", \"s1\"]);\n       last ≈ sol.u[end][[2, 1]]\ntrue\n\njulia> last2 = extract_last_timesteps(sol; last = 1, idxs = [2])\n       last2 ≈ sol.u[end][[2]]\ntrue\n\njulia> last2 = extract_last_timesteps(sol; last = 1, idxs = \"s2\")\n       last2 ≈ sol.u[end][[2]]\ntrue\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#EcoNetDynOutputs.get_alive_species-Tuple{Any}","page":"Functions","title":"EcoNetDynOutputs.get_alive_species","text":"get_alive_species(solution; idxs = nothing, threshold = 0)\n\nReturns a tuple with species having a biomass above threshold at the end of a simulation.\n\nExamples\n\njulia> foodweb = Foodweb([0 0; 0 0]);\n       m = default_model(foodweb);\n       sol = simulate(m, [0, 0.5], 20; show_degenerated = false);\n       get_alive_species(sol)\n(species = [:s2], idxs = [2])\n\njulia> sol = simulate(m, [0.5, 0], 20; show_degenerated = false);\n       get_alive_species(sol)\n(species = [:s1], idxs = [1])\n\njulia> sol = simulate(m, [0.5, 0.5], 20; show_degenerated = false);\n       get_alive_species(sol)\n(species = [:s1, :s2], idxs = [1, 2])\n\njulia> sol = simulate(m, [0, 0], 20; show_degenerated = false);\n       get_alive_species(sol)\n(species = Symbol[], idxs = Int64[])\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#EcoNetDynOutputs.get_dBdt-Tuple{Model}","page":"Functions","title":"EcoNetDynOutputs.get_dBdt","text":"get_dBdt(m::Model)\n\nGenerate the function returning the vector of species growth rate (dB/dt) given the vector of their biomass (B), given a Model from EcologicalNetworksDynamics.\n\nThe output is aimed to be passed to the jacobian function of ForwardDiff. For more information see ForwardDiff documentation.\n\nSee also jacobian.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#EcoNetDynOutputs.get_interaction-Tuple{Model, AbstractVector}","page":"Functions","title":"EcoNetDynOutputs.get_interaction","text":"get_interaction(m::Model, B::AbstractVector)\n\nCompute the interaction of the model m. Because interactions are density-dependent, the vectory of species biomass B should be specified. A[i, j] is the interaction from species j to species i, and is formally defined as the derivative of the per capita growth of species i with respect to variation in biomass of species j. See Novak et al. 2016.\n\nSee also sensitivity.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#EcoNetDynOutputs.get_pgr-Tuple{Model}","page":"Functions","title":"EcoNetDynOutputs.get_pgr","text":"get_pgr(m::Model)\n\nGenerate the function returning the vector of species per capita growth rate (1/B x dB/dt) given the vector of their biomass (B), given a Model from EcologicalNetworksDynamics.\n\nSee also sensitivity.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#EcoNetDynOutputs.keystoneness-Tuple{Model, AbstractVector}","page":"Functions","title":"EcoNetDynOutputs.keystoneness","text":"keystoneness(m::Model, B::AbstractVector)\n\nCompute species keystoneness from a given model m at the point given by the vector of species biomass B. Most of the time B should be the vector of species equilibrium biomass. Keystoneness of species i is defined as the sum abs(S[i, j]) for j different from i. It quantifies how a change in the growth rate of species i impacts all other species.\n\nFor a formal definition see Li et al. 2025.\n\nSee also sensitivity.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#EcoNetDynOutputs.process_idxs-Tuple{Any}","page":"Functions","title":"EcoNetDynOutputs.process_idxs","text":"process_idxs(solution; idxs = nothing)\n\nCheck and sanitize the species indices or names provided (idxs). Used in extract_last_timesteps.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#EcoNetDynOutputs.reactivity-Tuple{AbstractMatrix}","page":"Functions","title":"EcoNetDynOutputs.reactivity","text":"reactivity(j::AbstractMatrix)\n\nCompute community reactivity from the jacobian. Reactivity corresponds to the worst initial response of the community to a pulse disturbance.\n\nFor technical details see Arnoldi et al. 2019\n\nSee also jacobian.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#EcoNetDynOutputs.resilience-Tuple{AbstractMatrix}","page":"Functions","title":"EcoNetDynOutputs.resilience","text":"resilience(j::AbstractMatrix)\n\nCompute community resilience from the jacobian. Resilience corresponds here to the dominant eigenvalues of the Jacobian.\n\nFor technical details see Arnoldi et al. 2019\n\nSee also jacobian.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#EcoNetDynOutputs.resistance-Tuple{Model, AbstractVector}","page":"Functions","title":"EcoNetDynOutputs.resistance","text":"resistance(m::Model, B::AbstractVector; response_of = :all, perturbation_on = :all, aggregated = false)\n\nCompute the resistance of species or the entire community to a press disturbance (such as an increase in mortality). Resistance computation is based on the sensitivity matrix. To get resistance computed from simulated dynamics use resistance_simulation.\n\nMain arguments\n\nm specifies the dynamical model.\nB is the vector of species equilibrium biomass.\n\nKeyword arguments\n\nresponse_of the response_of which species is measured, by default set to :all.\nperturbation_on which species is affected by the press, by default set to :all.\nagregated if true return the resistance on the species selected by response_of, can be used typically to compute the resistance at the community level. By default set to false, so that resistance is evaluated at the species level.\n\nSee also sensitivity.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#EcoNetDynOutputs.resistance_simulation-Tuple{Model, AbstractVector}","page":"Functions","title":"EcoNetDynOutputs.resistance_simulation","text":"resistance_simulation(\nm::Model,\nB::AbstractVector;\nmortality_increment::AbstractVector = fill(0.1, m.richness),\nresponse_of = :all,\naggregated = false,\nnormalized = true,\n\n)\n\nCompute the resistance of species or group of species to a mortality increase. Resistance is computed from simulation outputs. For analytical computation see resistance. For small mortality_increment values both function should be equivalent.\n\nResistance is defined as the change in biomass relative to the mortality increment, when normalized is true. When normalized is false, the absolute change in biomass is returned.\n\nWhen aggregated is set to true, the total change in biomass is computed, and is normalized by the mean mortality increment.\n\nNote that if normalized is true and the mortality increment of species is set to 0, its resistance value will be set to :undefined because of division by 0. To bypass this behaviour, set :normalized to false, and then use the normalization of your choice on the output.\n\nMain arguments\n\nm specifies the dynamical model.\nB is the vector of species equilibrium biomass.\n\nKeyword arguments\n\nresponse_of the response_of which species is measured, by default set to :all.\nmortality_increment vector which species the increase in mortality rate for each species.\nagggregated if true return the resistance on the species selected by response_of, can be used typically to compute the resistance at the community level. By default set to false, so that resistance is evaluated at the species level.\nnormalized is the change in biomass normalized by the mortality increment. By default set to true.\n\nSee also sensitivity.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#EcoNetDynOutputs.secondary_extinctions-Tuple{Model, Integer, AbstractVector}","page":"Functions","title":"EcoNetDynOutputs.secondary_extinctions","text":"secondary_extinctions(\nm::Model,\nextinct_sp::Integer,\nB_start::AbstractVector;\nt_end = 1_000,\nthreshold = 1e-6,\n\n)\n\nCompute secondary extinctions following the primary extinction of extinct_sp of a model m with initial biomasses B_start.\n\nKeyword arguments\n\nt_end specifies the duration of simulation\nthreshold gives the biomass below which a species is considered extinct.\n\nSee also .\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#EcoNetDynOutputs.sensitivity-Tuple{Model, AbstractVector}","page":"Functions","title":"EcoNetDynOutputs.sensitivity","text":"sensitivity(m::Model, B::AbstractVector)\n\nCompute the sensitivity matrix of the model m. Because interactions are density-dependent, the vectory of species biomass B should be specified. The sensitivity matrix is defined as the inverse of the interaction matrix. See Novak et al. 2016.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#ForwardDiff.jacobian-Tuple{Model, AbstractVector}","page":"Functions","title":"ForwardDiff.jacobian","text":"jacobian(m::Model, B::AbstractVector)\n\nCompute the jacobian of the system specied by the model B. The jacobian is evaluated in B which gives species biomass.\n\n\n\n\n\n","category":"method"}]
}
